[{"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\index.js":"1","C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\App.js":"2","C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\Expenses\\Expenses.js":"3","C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\Expenses\\ExpenseItem.js":"4","C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\UI\\Card.js":"5","C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\Expenses\\ExpenseDate.js":"6","C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\NewExpense\\NewExpense.js":"7","C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\NewExpense\\ExpenseForm.js":"8"},{"size":302,"mtime":1631532334152,"results":"9","hashOfConfig":"10"},{"size":1652,"mtime":1631697896201,"results":"11","hashOfConfig":"10"},{"size":794,"mtime":1631541647752,"results":"12","hashOfConfig":"10"},{"size":2183,"mtime":1631609999021,"results":"13","hashOfConfig":"10"},{"size":795,"mtime":1631624777409,"results":"14","hashOfConfig":"10"},{"size":758,"mtime":1631541684115,"results":"15","hashOfConfig":"10"},{"size":848,"mtime":1631697226016,"results":"16","hashOfConfig":"10"},{"size":4122,"mtime":1631696206471,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ak6hcn",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\index.js",[],["36","37"],"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\App.js",[],"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\Expenses\\Expenses.js",[],"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\Expenses\\ExpenseItem.js",[],"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\UI\\Card.js",[],"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\Expenses\\ExpenseDate.js",[],"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\NewExpense\\NewExpense.js",[],"C:\\Users\\DindarA\\ReactTheCompleteGuide\\01-starting-setup\\src\\components\\NewExpense\\ExpenseForm.js",["38"],"import React, { useState } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport \"./ExpenseForm.css\";\r\n\r\n// Now that we have added a JSX attribute to the expenseForm that point to saveExpenseDataHandler (NewExpense.js page), \r\n// We can use props here\r\nconst ExpenseForm = (props) => {\r\n  // We can have multiple state in a component\r\n  const [enteredTitle, setEnteredTitle] = useState('');\r\n  const [enteredAmount, setEnteredAmount] = useState('');\r\n  const [enteredDate, setEnteredDate] = useState('');\r\n\r\n  /* Instead of using multiple states, \r\n    we use here one state with one object */\r\n  // const [userInput, setUserInput] = useState({\r\n  //   enteredTitle: \"\",\r\n  //   enteredAmount: \"\",\r\n  //   enteredDate: \"\",\r\n  // });\r\n  // Vanilla JS\r\n  // We automatically get an object event by listening to events\r\n  // document.getElementById('').addEventListener('click', (event) => {})\r\n  // The same is true here with React\r\n  const titleChangeHandler = (event) => {\r\n    // console.log(event);\r\n    // Names found in the console: This will display the input value\r\n    // console.log(event.target.value);\r\n\r\n    // Store the value in our state\r\n    // Used with multiple states\r\n    setEnteredTitle(event.target.value);\r\n\r\n    // New way with one state\r\n    // setUserInput({\r\n    //   // We need to use the spread operator to keep track of the state of our other key pairs\r\n    //   // otherwise their value will be lost\r\n    //   ...userInput,\r\n    //   enteredTitle: event.target.value,\r\n    // });\r\n    /* Whenever working with previous state, \r\n    here this is the right way to be sure we are working with the latest state snapshot.Â */\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredTitle: event.target.value };\r\n    // });\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    // console.log(event.target.value);\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: event.target.value,\r\n    // });\r\n  };\r\n  const dateChangeHandler = (event) => {\r\n    // console.log(event.target.value);\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: event.target.value,\r\n    // });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    /* Because of the onSubmit() added on the form, we need to prevent the default JS behavior \r\n    that cause the whole page to refresh by clicking on the add expense button */\r\n    event.preventDefault();\r\n    \r\n    // Object needed to clear the field after writting the inputs  \r\n    const expenseData = {\r\n      title: enteredTitle, \r\n      amount: enteredAmount, \r\n      date: new Date (enteredDate)\r\n    };\r\n    \r\n    // console.log(expenseData);\r\n    // Here we ask the function to be executed\r\n    props.onSaveExpenseData(expenseData);\r\n    // Clear the input field after completing the form\r\n    setEnteredTitle('');\r\n    setEnteredAmount('');\r\n    setEnteredDate('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input \r\n            type=\"text\"\r\n            value={enteredTitle}  \r\n            onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          {/* Min and max date will be used for a filter later */}\r\n          <input\r\n            type=\"date\"\r\n            min=\"2020-01-01\"\r\n            max=\"2023-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default ExpenseForm;\r\n",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":2,"column":10,"nodeType":"45","messageId":"46","endLine":2,"endColumn":22},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'createPortal' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]